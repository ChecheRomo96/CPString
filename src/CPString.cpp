#include "CPString.h"

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

bool CPString::NumberConversion::LetterCase::Mode = CPString::NumberConversion::LetterCase::Upper;
bool CPString::NumberConversion::IntFormat::Mode = CPString::NumberConversion::IntFormat::Mode;




////////////////////////////////////////////////////////////////////////////////////////////////////////
// Global Methods

	void CPString::SetLetterCase(bool Mode)
	{
		CPString::NumberConversion::LetterCase::Mode = Mode;
	}

	void CPString::SetLetterCase_Upper()
	{
		CPString::NumberConversion::LetterCase::Mode = CPString::NumberConversion::LetterCase::Upper;
	}

	void CPString::SetLetterCase_Lower()
	{
		CPString::NumberConversion::LetterCase::Mode = CPString::NumberConversion::LetterCase::Lower;
	}

	void CPString::SetIntFormat(bool Mode)
	{
		CPString::NumberConversion::IntFormat::Mode = Mode;
	}

	void CPString::SetIntFormat_Signed()
	{
		CPString::NumberConversion::IntFormat::Mode = CPString::NumberConversion::IntFormat::Signed;
	}

	void CPString::SetIntFormat_Absolute()
	{
		CPString::NumberConversion::IntFormat::Mode = CPString::NumberConversion::IntFormat::Absolute;
	}
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor, Destructor and Clear
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Constructor

		CPString::string::string()
		{
			////////////////////////////////////////////////////////////////////////////////////////////
		    // Arduino String

		        #if defined(ARDUINO)
					_string = String("");
		        #endif
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////
		    // std::string

		        #if  defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
					_string = std::string("");
		        #endif
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////
		    // PSoC Creator
		    
		        #if defined(PSOC_CREATOR)
					_buffer = NULL;
					_size = 0;
		        #endif
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////
		}
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Destructor

		CPString::string::~string()
		{
			clear();
		}
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// clear


		void CPString::string::clear()
		{
			////////////////////////////////////////////////////////////////////////////////////////////
			// Clear Method
			////////////////////////////////////////////////////////////////////////////////////////////
		    // Cross Compatible Code

		        resize(0);
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////
		}
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copy Constructor and Equality Operator

	////////////////////////////////////////////////////////////////////////////////////////////////////
    // CPString::string

		CPString::string::string(const string& Source)
		{
			////////////////////////////////////////////////////////////////////////////////////////////
		    // Arduino String and std::string

		        #if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
					_string = Source;
		        #endif
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////
		    // PSoC Creator
		    
		        #if defined(PSOC_CREATOR)
					_buffer = NULL;
					_size = 0;

					resize(Source.length()+1);
					for(uint16_t i = 0; i < _size; i++)
					{
						_buffer[i] = Source[i];
					}
		        #endif
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////
		}

		CPString::string& CPString::string::operator=(const string& Source)
	    {
	        if(this != &Source)
	        {
				resize(Source.length());
				for(uint16_t i = 0; i < Source.length(); i++)
				{
					(*this)[i] = Source[i];
				}
				(*this)[Source.length()] = '\0';
	        }
	        return *this;
	    }
	//
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // std::string

	    #if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)

			CPString::string::string(const std::string& Source)
			{
				_string = Source;
			}

			CPString::string& CPString::string::operator=(const std::string& Source)
		    {
		        _string = Source;
		        
		        return *this;
		    }

		#endif
	//
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Arduino String

		#if defined(ARDUINO)

			CPString::string::string(const String& Source)
			{
				_string = Source;
			}

			CPString::string& CPString::string::operator=(const String& Source)
		    {
		        if(&_string != &Source)
		        {
					_string = Source;
		        }
		        return *this;
		    }
		#endif
	//
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // char *

		CPString::string::string(const char* Source)
		{
			////////////////////////////////////////////////////////////////////////////////////////////
			// Initialization
			////////////////////////////////////////////////////////////////////////////////////////////
		    // PSoC Creator 
		    
		        #if defined(PSOC_CREATOR)

					_buffer = NULL;
					_size = 0;
		        #endif
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////

			////////////////////////////////////////////////////////////////////////////////////////////
			// Source NULL check
			////////////////////////////////////////////////////////////////////////////////////////////
		    // Cross Compatible code

				if(Source == NULL)
				{
					resize(0);
				}
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////

			////////////////////////////////////////////////////////////////////////////////////////////
		    // Copying data
		  	////////////////////////////////////////////////////////////////////////////////////////////
		    // Cross Compatible code
		    
				else
				{
					uint16_t len = strlen(Source);
					resize(len);
					for(uint16_t i = 0; i < len ; i++)
					{
						(*this)[i] = Source[i];
					}
				}
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////
		}


		CPString::string::string(const char* Source, unsigned int Size)
		{
			////////////////////////////////////////////////////////////////////////////////////////////
			// Initialization
			////////////////////////////////////////////////////////////////////////////////////////////
		    // PSoC Creator 
		    
		        #if defined(PSOC_CREATOR)

					_buffer = NULL;
					_size = 0;
		        #endif
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////

			////////////////////////////////////////////////////////////////////////////////////////////
			// Source NULL check
			////////////////////////////////////////////////////////////////////////////////////////////
		    // Cross Compatible code

				if(Source == NULL)
				{
					resize(0);
				}
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////

			////////////////////////////////////////////////////////////////////////////////////////////
		    // Copying data
		  	////////////////////////////////////////////////////////////////////////////////////////////
		    // Cross Compatible code
		    
				else
				{
					resize(Size);

					for(uint16_t i = 0; i < Size; i++)
					{
						(*this)[i] = Source[i];
					}
				}
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////
		}
		
		CPString::string& CPString::string::operator=(const char* Source)
	    {
			////////////////////////////////////////////////////////////////////////////////////////////
			// Source NULL check
			////////////////////////////////////////////////////////////////////////////////////////////
		    // Cross Compatible code

				if(Source == NULL)
				{
					resize(0);
				}
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////

			////////////////////////////////////////////////////////////////////////////////////////////
		    // Copying data
		  	////////////////////////////////////////////////////////////////////////////////////////////
		    // Cross Compatible code
		    
				else
				{
					uint16_t len = strlen(Source);
					resize(len);

					for(uint16_t i = 0; i < len; i++)
					{
						(*this)[i] = Source[i];
					}
				}
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////

			////////////////////////////////////////////////////////////////////////////////////////////
		    // Returning a reference to this object 
		  	////////////////////////////////////////////////////////////////////////////////////////////
		    // Cross Compatible code
		    
	        	return *this;
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////
	    }
	// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////
	// integers

	    ////////////////////////////////////////////////////////////////////////////////////////////////
	    // unsigned int

		    ////////////////////////////////////////////////////////////////////////////////////////////
		    // uint8_t

				CPString::string::string(const uint8_t Source, uint8_t Base, bool LetterCase)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Convetring to char representation Base 10 
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatible Code

				    	_BaseConversion_uint8(Source,Base,LetterCase);
					//
				    ////////////////////////////////////////////////////////////////////////////////////
				}

				CPString::string::string(const uint8_t Source, const char* Format, unsigned int Size)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

			    	////////////////////////////////////////////////////////////////////////////////////
					// Resize the buffer
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatuble Code
				    
						resize(Size);
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Copying the data
					////////////////////////////////////////////////////////////////////////////////////
					// Arduino String and std::string

				        #if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
							char* buffer; 
							buffer = new char[Size + 1];
							sprintf(buffer,Format,Source);
							buffer[Size] = '\0';
							_string = buffer;
							delete [] buffer;
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
					//  PSoC Creator

				        #if defined(PSOC_CREATOR)
							sprintf(_buffer,Format,Source);
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
				}
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		    // uint16_t

				CPString::string::string(const uint16_t Source, uint8_t Base, bool LetterCase)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Convetring to char representation Base 10 
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatible method

						_BaseConversion_uint16(Source,Base,LetterCase);
				   	//
				    ////////////////////////////////////////////////////////////////////////////////////
				}

				CPString::string::string(const uint16_t Source, const char* Format, unsigned int Size)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

			    	////////////////////////////////////////////////////////////////////////////////////
					// Resize the buffer
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatuble Code
				    
						resize(Size);
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Copying the data
					////////////////////////////////////////////////////////////////////////////////////
					// Arduino String and std::string

				        #if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
							char* buffer;
							buffer = new char[Size + 1];
							sprintf(buffer, Format, Source);
							buffer[Size] = '\0';
							_string = buffer;
							delete[] buffer;
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
					//  PSoC Creator

				        #if defined(PSOC_CREATOR)
							sprintf(_buffer,Format,Source);
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
				}
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		    // uint32_t

				CPString::string::string(const uint32_t Source, uint8_t Base, bool LetterCase)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator
                    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Convetring to char representation Base 10 
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatible Code

						_BaseConversion_uint32(Source,Base,LetterCase);
					//
				    ////////////////////////////////////////////////////////////////////////////////////
				}

				CPString::string::string(const uint32_t Source, const char* Format, unsigned int Size)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

			    	////////////////////////////////////////////////////////////////////////////////////
					// Resize the buffer
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatuble Code
				    
						resize(Size);
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Copying the data
					////////////////////////////////////////////////////////////////////////////////////
					// Arduino String and std::string

				        #if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
							char* buffer;
							buffer = new char[Size + 1];
							sprintf(buffer, Format, Source);
							buffer[Size] = '\0';
							_string = buffer;
							delete[] buffer;
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
					//  PSoC Creator

				        #if defined(PSOC_CREATOR)
							sprintf(_buffer,Format,Source);
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
				}
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		    // uint64_t

				CPString::string::string(const uint64_t Source, uint8_t Base, bool LetterCase)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator
                    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Convetring to char representation Base 10 
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatible Code

						_BaseConversion_uint64(Source,Base,LetterCase);
					//
				    ////////////////////////////////////////////////////////////////////////////////////
				}

				CPString::string::string(const uint64_t Source, const char* Format, unsigned int Size)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

			    	////////////////////////////////////////////////////////////////////////////////////
					// Resize the buffer
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatuble Code
				    
						resize(Size);
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Copying the data
					////////////////////////////////////////////////////////////////////////////////////
					// Arduino String and std::string

						#if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
							char* buffer;
							buffer = new char[Size + 1];
							sprintf(buffer, Format, Source);
							buffer[Size] = '\0';
							_string = buffer;
							delete[] buffer;
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
					//  PSoC Creator

				        #if defined(PSOC_CREATOR)
							sprintf(_buffer,Format,Source);
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
				}
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		//
	    ////////////////////////////////////////////////////////////////////////////////////////////////
	    // signed int

		    ////////////////////////////////////////////////////////////////////////////////////////////
		    // int8_t

				CPString::string::string(const int8_t Source, uint8_t Base, bool LetterCase, bool Absolute)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////
						
					////////////////////////////////////////////////////////////////////////////////////
					// Convetring to char representation Base 10 
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatible Code

						_BaseConversion_int8(Source,Base,LetterCase,Absolute);
					//
				    ////////////////////////////////////////////////////////////////////////////////////
				}

				CPString::string::string(const int8_t Source, const char* Format, unsigned int Size)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

			    	////////////////////////////////////////////////////////////////////////////////////
					// Resize the buffer
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatuble Code
				    
						resize(Size);
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Copying the data
					////////////////////////////////////////////////////////////////////////////////////
					// Arduino String and std::string

				        #if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
							char* buffer;
							buffer = new char[Size + 1];
							sprintf(buffer, Format, Source);
							buffer[Size] = '\0';
							_string = buffer;
							delete[] buffer;
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
					//  PSoC Creator

				        #if defined(PSOC_CREATOR)
							sprintf(_buffer,Format,Source);
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
				}
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		    // int16_t

				CPString::string::string(const int16_t Source, uint8_t Base, bool LetterCase, bool Absolute)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////
						
					////////////////////////////////////////////////////////////////////////////////////
					// Convetring to char representation Base 10 
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatible Code

						_BaseConversion_int16(Source,Base,LetterCase,Absolute);
					//
				    ////////////////////////////////////////////////////////////////////////////////////
				}

				CPString::string::string(const int16_t Source, const char* Format, unsigned int Size)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

			    	////////////////////////////////////////////////////////////////////////////////////
					// Resize the buffer
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatuble Code
				    
						resize(Size);
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Copying the data
					////////////////////////////////////////////////////////////////////////////////////
					// Arduino String and std::string

				        #if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
							char* buffer;
							buffer = new char[Size + 1];
							sprintf(buffer, Format, Source);
							buffer[Size] = '\0';
							_string = buffer;
							delete[] buffer;
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
					//  PSoC Creator

				        #if defined(PSOC_CREATOR)
							sprintf(_buffer,Format,Source);
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
				}
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		    // int32_t

				CPString::string::string(const int32_t Source, uint8_t Base, bool LetterCase, bool Absolute)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////
						
					////////////////////////////////////////////////////////////////////////////////////
					// Convetring to char representation Base 10 
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatible Code

						_BaseConversion_int32(Source,Base,LetterCase,Absolute);
					//
				    ////////////////////////////////////////////////////////////////////////////////////
				}

				CPString::string::string(const int32_t Source, const char* Format, unsigned int Size)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

			    	////////////////////////////////////////////////////////////////////////////////////
					// Resize the buffer
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatuble Code
				    
						resize(Size);
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Copying the data
					////////////////////////////////////////////////////////////////////////////////////
					// Arduino String and std::string

						#if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
							char* buffer;
							buffer = new char[Size + 1];
							sprintf(buffer, Format, Source);
							buffer[Size] = '\0';
							_string = buffer;
							delete[] buffer;
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
					//  PSoC Creator

				        #if defined(PSOC_CREATOR)
							sprintf(_buffer,Format,Source);
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
				}
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		    // int64_t

				CPString::string::string(const int64_t Source, uint8_t Base, bool LetterCase, bool Absolute)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////
						
					////////////////////////////////////////////////////////////////////////////////////
					// Convetring to char representation Base 10 
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatible Code

						_BaseConversion_int64(Source,Base,LetterCase,Absolute);
					//
				    ////////////////////////////////////////////////////////////////////////////////////
				}

				CPString::string::string(const int64_t Source, const char* Format, unsigned int Size)
				{
			    	////////////////////////////////////////////////////////////////////////////////////
					// Initialization
					////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator 
				    
				        #if defined(PSOC_CREATOR)

							_buffer = NULL;
							_size = 0;
				        #endif
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

			    	////////////////////////////////////////////////////////////////////////////////////
					// Resize the buffer
					////////////////////////////////////////////////////////////////////////////////////
				    // Cross Compatuble Code
				    
						resize(Size);
				    //
				    ////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
					// Copying the data
					////////////////////////////////////////////////////////////////////////////////////
					// Arduino String and std::string

				        #if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
							char* buffer;
							buffer = new char[Size + 1];
							sprintf(buffer, Format, Source);
							buffer[Size] = '\0';
							_string = buffer;
							delete[] buffer;
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
					//  PSoC Creator

				        #if defined(PSOC_CREATOR)
							sprintf(_buffer,Format,Source);
				        #endif
					//
					////////////////////////////////////////////////////////////////////////////////////
				}
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
    // float

		CPString::string::string(const float Source)
		{
	    	////////////////////////////////////////////////////////////////////////////////////////////
			// Initialization
			////////////////////////////////////////////////////////////////////////////////////////////
		    // PSoC Creator 
		    
		        #if defined(PSOC_CREATOR)

					_buffer = NULL;
					_size = 0;
		        #endif
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////  
		
			////////////////////////////////////////////////////////////////////////////////////////////
			// Float to String Conversion
			////////////////////////////////////////////////////////////////////////////////////////////
		    // std::string 

				#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
			   		std::ostringstream buff;
				    buff<<Source;
				    _string = buff.str();  
				#endif
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		    // Arduino String 

			    #if defined (ARDUINO)
			        _string = String(Source);
			    #endif
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		    // PSoC Creator 

			    #if defined (PSOC_CREATOR)

			        ////////////////////////////////////////////////////////////////////////////////////
			        // Creating a string with the format "%.af" where a is the decimal part 
			       	////////////////////////////////////////////////////////////////////////////////////
			       	// PSoC Creator

			        	////////////////////////////////////////////////////////////////////////////////////
			        	// Initialize Format buffer and setting bytes 0 and 1, initialize an offset variable

				        	char _Format[6];
					        int offset = 2;
					        
					        _Format[0] = '%';
					        _Format[1] = '.';
					    //
					    ////////////////////////////////////////////////////////////////////////////////////
			        	// Convert the Precision argument to a CPString::string

					        string *str = NULL;
					        str = new string("3");
					    //
					    ////////////////////////////////////////////////////////////////////////////////////
			        	// copy the data from the newly creates string
					        
					        for(uint8_t i = 0; i < str->length(); i++)
					        {
					            _Format[offset+i] = str->at(i);
					        }
					    //
					    ////////////////////////////////////////////////////////////////////////////////////
			        	// Increase the offset variable
					        
					        offset += str->length();
					    //
					    ////////////////////////////////////////////////////////////////////////////////////
			        	// delete the Precision string

					        delete str;
					    //
					    ////////////////////////////////////////////////////////////////////////////////////
					    // 
					        _Format[offset++] = 'f';
					        _Format[offset++] = '\0';
					    //
			        	////////////////////////////////////////////////////////////////////////////////////
					//
					////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
				    // Calculating buffer size and declare it
					//
				    // Format --> [sign + integerPart + '.' + Precision + '\0']
			    	////////////////////////////////////////////////////////////////////////////////////
					// PSoC Creator

				        uint8_t len = log10(Source)+3+3; 
				        char buff[len];
			    	//
			    	////////////////////////////////////////////////////////////////////////////////////

			    	////////////////////////////////////////////////////////////////////////////////////
			    	//	Reserving memory space with the return value of sprintf
				    ////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator

			        	resize(sprintf(buff,_Format,Source));
				    //
				    ////////////////////////////////////////////////////////////////////////////////////
		    
			    	////////////////////////////////////////////////////////////////////////////////////
					// Copying data
			    	////////////////////////////////////////////////////////////////////////////////////
			        // PSoC Creator

						for(uint8_t i = 0; i < _size; i++)
						{
							_buffer[i] = buff[i];
						}
				    //
				    ////////////////////////////////////////////////////////////////////////////////////
			    
			    #endif
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		}

		CPString::string::string(const float Source, uint8_t Precision)
		{
	    	////////////////////////////////////////////////////////////////////////////////////////////
			// Initialization
			////////////////////////////////////////////////////////////////////////////////////////////
		    // PSoC Creator 
		    
		        #if defined(PSOC_CREATOR)

					_buffer = NULL;
					_size = 0;
		        #endif
		    //
		    ////////////////////////////////////////////////////////////////////////////////////////////
			
			////////////////////////////////////////////////////////////////////////////////////////////
			// Float to String Conversion
			////////////////////////////////////////////////////////////////////////////////////////////
		    // std::string 

				#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
			   		std::ostringstream buff;
                    buff.precision(Precision);
				    buff<< std::fixed << Source ;
				    _string = buff.str();  
				#endif
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		    // Arduino String 

			    #if defined (ARDUINO)
			        _string = String(Source,Precision);
			    #endif
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		    // PSoC Creator 

			    #if defined (PSOC_CREATOR)

			        ////////////////////////////////////////////////////////////////////////////////////
			        // Creating a string with the format "%.af" where a is the decimal part 
			       	////////////////////////////////////////////////////////////////////////////////////
			       	// PSoC Creator

			        	////////////////////////////////////////////////////////////////////////////////////
			        	// Initialize Format buffer and setting bytes 0 and 1, initialize an offset variable

				        	char _Format[6];
					        int offset = 2;
					        
					        _Format[0] = '%';
					        _Format[1] = '.';
					    //
					    ////////////////////////////////////////////////////////////////////////////////////
			        	// Convert the Precision argument to a CPString::string

					        string *str = NULL;
					        str = new string(Precision);
					    //
					    ////////////////////////////////////////////////////////////////////////////////////
			        	// copy the data from the newly creates string
					        
					        for(uint8_t i = 0; i < str->length(); i++)
					        {
					            _Format[offset+i] = str->at(i);
					        }
					    //
					    ////////////////////////////////////////////////////////////////////////////////////
			        	// Increase the offset variable
					        
					        offset += str->length();
					    //
					    ////////////////////////////////////////////////////////////////////////////////////
			        	// delete the Precision string

					        delete str;
					    //
					    ////////////////////////////////////////////////////////////////////////////////////
					    // 
					        _Format[offset++] = 'f';
					        _Format[offset++] = '\0';
					    //
			        	////////////////////////////////////////////////////////////////////////////////////
					//
					////////////////////////////////////////////////////////////////////////////////////

					////////////////////////////////////////////////////////////////////////////////////
				    // Calculating buffer size and declare it
					//
				    // Format --> [sign + integerPart + '.' + Precision + '\0']
			    	////////////////////////////////////////////////////////////////////////////////////
					// PSoC Creator

				        uint8_t len = log10(Source)+Precision+3; 
				        char buff[len];
			    	//
			    	////////////////////////////////////////////////////////////////////////////////////

			    	////////////////////////////////////////////////////////////////////////////////////
			    	//	Reserving memory space with the return value of sprintf
				    ////////////////////////////////////////////////////////////////////////////////////
				    // PSoC Creator

			        	resize(sprintf(buff,_Format,Source));
				    //
				    ////////////////////////////////////////////////////////////////////////////////////
		    
			    	////////////////////////////////////////////////////////////////////////////////////
					// Copying data
			    	////////////////////////////////////////////////////////////////////////////////////
			        // PSoC Creator

						for(uint8_t i = 0; i < _size; i++)
						{
							_buffer[i] = buff[i];
						}
				    //
				    ////////////////////////////////////////////////////////////////////////////////////
			    
			    #endif
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		}
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
    // doubleP  

		/* NOT YET IMPLEMENTED */
	//
    ////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operators

    ////////////////////////////////////////////////////////////////////////////////////////////////////
	// Cast Operators

		////////////////////////////////////////////////////////////////////////////////////////////////
		// std::string

			#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
				CPString::string::operator std::string() const
				{
					return _string;
				}
			#endif
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
		// Arduino String

			#if defined(ARDUINO)
				CPString::string::operator String() const
				{
					return _string;
				}
			#endif
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
    // Equality and Inequality Operators
		
		bool CPString::string::operator==(const string& rhs) const
		{
            #if defined(ARDUINO)||defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
    			if(strcmp(_string.c_str(),rhs.c_str())==0){return 1;}
    			else{return 0;}
            #elif defined(PSOC_CREATOR)
                if(strcmp(_buffer,rhs.c_str())==0){return 1;}
    			else{return 0;}
            #endif
		}

		bool CPString::string::operator!=(const string& rhs) const
		{
            #if defined(ARDUINO)||defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
    			if(strcmp(_string.c_str(),rhs.c_str())==0){return 0;}
    			else{return 1;}
            #elif defined(PSOC_CREATOR)
                if(strcmp(_buffer,rhs.c_str())==0){return 0;}
    			else{return 1;}
            #endif
		}
	//
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Addition and Substraction Operators

		////////////////////////////////////////////////////////////////////////////////////////////////
		// string

			CPString::string& CPString::string::operator+=(const CPString::string& rhs)
			{

				////////////////////////////////////////////////////////////////////////////////////////
			    // Cross Compatible code
			    
			       	unsigned int a = length();
					unsigned int b = rhs.length();

					if(a + b == 0)
					{
						return (*this);
					}
					else
					{
						resize( a + b );

						for(uint8_t i = 0; i < b; i++)
						{
							(*this)[a+i] = rhs[i];
						}
					}
			    //
			    ////////////////////////////////////////////////////////////////////////////////////////

				return (*this);
			}

			CPString::string CPString::string::operator+(const CPString::string& rhs) const
			{
				return string(*this) += rhs;
			}
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
		// Char *

			/*CPString::string& CPString::string::operator+=(const char* rhs)
			{
				string tmp(rhs);
				(*this) += tmp;

				return (*this);
			}

			CPString::string CPString::string::operator+(const char* rhs) const
			{
				//tmp += rhs;
				return string(*this) += rhs;
			}*/
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
	//
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Subsctipt Array Operator

		char& CPString::string::operator[](const unsigned int i)
		{
			////////////////////////////////////////////////////////////////////////////////////////////
			// Arduino String and std::string

		        #if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
					return _string[i];
		        #endif
			//
			////////////////////////////////////////////////////////////////////////////////////////////
			//  PSoC Creator

		        #if defined(PSOC_CREATOR)
					return _buffer[i];
		        #endif
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		}

		const char CPString::string::operator[](const unsigned int i) const
		{
			////////////////////////////////////////////////////////////////////////////////////////////
			// Arduino String and std::string

		        #if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
					return _string[i];
		        #endif
			//
			////////////////////////////////////////////////////////////////////////////////////////////
			//  PSoC Creator

		        #if defined(PSOC_CREATOR)
					return _buffer[i];
		        #endif
			//
			////////////////////////////////////////////////////////////////////////////////////////////
		}
	//
    ////////////////////////////////////////////////////////////////////////////////////////////////////
	// Streams
		
		#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
		    
            std::ostream& CPString::operator<<(std::ostream& os, const CPString::string& String)
			{
			    os << String.c_str();
			    return os;
			}
		#endif
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
// std::string and Arduino String Cross Compatible Methods

	unsigned int CPString::string::size() const
	{
		////////////////////////////////////////////////////////////////////////////////////////////////
	    // Arduino String 

	        #if defined(ARDUINO)
	        	return _string.length();
	        #endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////
	    // std::string

	        #if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
	        	return _string.length();
	        #endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////
	    // PSoC Creator
	    
	        #if defined(PSOC_CREATOR)
				
				return _size;
	        #endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////

		return 0;
	}

	unsigned int CPString::string::length() const
	{
    
	    #if defined(PSOC_CREATOR)
        	if(_buffer != NULL)
        	{
        		return strlen(_buffer);
        	}
	    #endif
        
		return size();
	}

	const char* CPString::string::c_str() const
	{
		////////////////////////////////////////////////////////////////////////////////////////////////
		// Resize Implementation
		////////////////////////////////////////////////////////////////////////////////////////////////
	    // std::string and Arduino String

	        #if defined(ARDUINO) || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
				return _string.c_str();
			#endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////
		// PSoC Creator
       		
        	#if defined(PSOC_CREATOR)
				return _buffer;
			#endif
       	//
	    ////////////////////////////////////////////////////////////////////////////////////////////////
	}

	char CPString::string::at(unsigned int n)
	{
		////////////////////////////////////////////////////////////////////////////////////////////////
		// at Implementations
		////////////////////////////////////////////////////////////////////////////////////////////////
	    // std::string 

	        #if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
				return _string.at(n);
			#endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////
	    // Arduino String

	        #if defined(ARDUINO)
				return _string.charAt(n);
			#endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////
		// PSoC Creator
       		
        	#if defined(PSOC_CREATOR)

				if(n < _size)
				{
					return _buffer[n];
				}
		        return '\0';
			#endif
       	//
	    ////////////////////////////////////////////////////////////////////////////////////////////////

	}

	const char CPString::string::at(unsigned int n) const
	{
		////////////////////////////////////////////////////////////////////////////////////////////////
		// at Implementations
		////////////////////////////////////////////////////////////////////////////////////////////////
	    // std::string 

	        #if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)
				return _string.at(n);
			#endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////
	    // Arduino String

	        #if defined(ARDUINO)
				return _string.charAt(n);
			#endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////
		// PSoC Creator
       		
        	#if defined(PSOC_CREATOR)

				if(n < _size)
				{
					return _buffer[n];
				}
		        return '\0';
			#endif
       	//
	    ////////////////////////////////////////////////////////////////////////////////////////////////
	}

	void CPString::string::resize(unsigned int new_size, char new_chars)
	{
		////////////////////////////////////////////////////////////////////////////////////////////////
		// Resize Implementation
		////////////////////////////////////////////////////////////////////////////////////////////////
	    // Arduino String

	        #if defined(ARDUINO)

				////////////////////////////////////////////////////////////////////////////////////////
				// Getting the current string length
				////////////////////////////////////////////////////////////////////////////////////////
			    // 
			    	uint8_t OldLength = length();
			    //
			    ////////////////////////////////////////////////////////////////////////////////////////

				////////////////////////////////////////////////////////////////////////////////////////
				// Getting up the number of chars that are going to be maintained
				////////////////////////////////////////////////////////////////////////////////////////
				//
			    	if(new_size != OldLength)
			    	{
			    		if(new_size == 0)
			    		{
			    			_string = "";
			    		}
			    		else if(new_size < OldLength)
				        {
				        	_string.remove(new_size, OldLength-new_size);
				        }
				        else
				        {
				        	char buffer[new_size - OldLength + 1];

							for(uint16_t i = 0; i < new_size-OldLength; i++)
							{
								buffer[i] = ' ';
							}

							buffer[new_size - OldLength] = '\0';

							_string += buffer;

							for(uint16_t i = OldLength; i < new_size; i++)
							{
								_string[i] = new_chars;
							}
				        }
			    	}
				//
				////////////////////////////////////////////////////////////////////////////////////////

			#endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////
	    // std::string

	        #if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__APPLE__) || defined(linux)

	        	unsigned int OldLength = size();

	        	_string.resize(Size, new_chars);

			#endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////
		// PSoC Creator
        	
        	#if defined(PSOC_CREATOR)

				////////////////////////////////////////////////////////////////////////////////////////
				// Validating that Size is different from the actual size
				////////////////////////////////////////////////////////////////////////////////////////
			    //
			        if((_buffer != NULL)&&(_size > 1))
					{
						if(new_size==_size-1)
						{
							return;
						}
					}

					if(new_size == 0)
					{
						if(_buffer != NULL)
                        {
                            free(_buffer);
                        }
						_buffer = NULL;
						_size = 0;
                        return;
					}
			    //
			    ////////////////////////////////////////////////////////////////////////////////////////

				////////////////////////////////////////////////////////////////////////////////////////
				// Getting the current string length
				////////////////////////////////////////////////////////////////////////////////////////
			    // 
			    	uint8_t OldLength = length();
			    //
			    ////////////////////////////////////////////////////////////////////////////////////////

				////////////////////////////////////////////////////////////////////////////////////////
				// setting up a char buffer
				////////////////////////////////////////////////////////////////////////////////////////
			    // 
                    CPVector::vector<char> tmp;
                    tmp.resize(new_size+1);
				//
				////////////////////////////////////////////////////////////////////////////////////////

				////////////////////////////////////////////////////////////////////////////////////////
				// Getting up the number of chars that are going to be maintained
				////////////////////////////////////////////////////////////////////////////////////////
				//
			        uint16_t MaintainedData = OldLength;
			        if(new_size<_size){MaintainedData = new_size;}
				//
				////////////////////////////////////////////////////////////////////////////////////////

				////////////////////////////////////////////////////////////////////////////////////////
				// Copying Data, Initializing the new blocks, Setting the last char to '\0'
				////////////////////////////////////////////////////////////////////////////////////////
				//
					for(uint16_t i = 0; i < MaintainedData; i++)
					{
						tmp[i] = _buffer[i];
					}

					for(uint16_t i = MaintainedData; i < new_size; i++)
					{
						tmp[i] = new_chars;
					}

					tmp[new_size] =  '\0';
				//
				////////////////////////////////////////////////////////////////////////////////////////
		        
				////////////////////////////////////////////////////////////////////////////////////////
				// delete the current buffer and allocate a new one
				////////////////////////////////////////////////////////////////////////////////////////
				//
					if(_buffer!=NULL){free(_buffer);}
			        _size = new_size+1;
			        _buffer = (char*)malloc(sizeof(char)*(_size));
			    //
				////////////////////////////////////////////////////////////////////////////////////////

			    ////////////////////////////////////////////////////////////////////////////////////////
				// Copying Data
				////////////////////////////////////////////////////////////////////////////////////////
			    //
                
                    if( _buffer == NULL ){_size  = 0;}
                    else
                    {
    					for(uint16_t i = 0; i < _size; i++)
    					{
    						_buffer[i] = tmp[i];
    					}
                    }
                    
                    tmp.clear();

				//
				////////////////////////////////////////////////////////////////////////////////////////

			#endif
	    //
	    ////////////////////////////////////////////////////////////////////////////////////////////////
	}
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
// Base Conversiom Helpers

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Unsigend Integers

		////////////////////////////////////////////////////////////////////////////////////////////////
		// uint8_t

			void CPString::string::_BaseConversion_uint8( uint8_t  Source, uint8_t Base, bool LetterCase)
			{
				char buffer[8];
				uint8_t counter = 0;

				if(Source == 0)
				{
					buffer[0] = '0';
					counter = 1;

				}
				else
				{
					while(Source > 0)
					{
						buffer[counter] = Flash::CopyBaseChar((Source+Base)%Base,LetterCase);
						counter++;
						Source/=Base;
					}
				}

				resize(counter);
    			
    			for(uint8_t i = 0; i < counter; i++)
				{
					(*this)[i] = buffer[(counter-1)-i];
				}
				(*this)[counter] = '\0';
			}
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
		// uint16_t

			void CPString::string::_BaseConversion_uint16( uint16_t Source, uint8_t Base, bool LetterCase)
			{
				char buffer[16];
				uint8_t counter = 0;

				if(Source == 0)
				{
					buffer[0] = '0';
					counter = 1;

				}
				else
				{
					while(Source > 0)
					{
						buffer[counter] = Flash::CopyBaseChar((Source+Base)%Base,LetterCase);
						counter++;
						Source/=Base;
					}
				}

				resize(counter);
    			
    			for(uint8_t i = 0; i < counter; i++)
				{
					(*this)[i] = buffer[(counter-1)-i];
				}
				(*this)[counter] = '\0';
			}
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
		// uint32_t

			void CPString::string::_BaseConversion_uint32( uint32_t Source, uint8_t Base, bool LetterCase)
			{
				char buffer[32];
				uint8_t counter = 0;

				if(Source == 0)
				{
					buffer[0] = '0';
					counter = 1;

				}
				else
				{
					while(Source > 0)
					{
						buffer[counter] = Flash::CopyBaseChar((Source+Base)%Base,LetterCase);
						counter++;
						Source/=Base;
					}
				}

				resize(counter);
    			
    			for(uint8_t i = 0; i < counter; i++)
				{
					(*this)[i] = buffer[(counter-1)-i];
				}
				(*this)[counter] = '\0';
			}
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
		// uint64_t

			void CPString::string::_BaseConversion_uint64( uint64_t Source, uint8_t Base, bool LetterCase)
			{
				char buffer[64];
				uint8_t counter = 0;

				if(Source == 0)
				{
					buffer[0] = '0';
					counter = 1;

				}
				else
				{
					while(Source > 0)
					{
						buffer[counter] = Flash::CopyBaseChar((Source+Base)%Base,LetterCase);
						counter++;
						Source/=Base;
					}
				}

				resize(counter);
    			
    			for(uint8_t i = 0; i < counter; i++)
				{
					(*this)[i] = buffer[(counter-1)-i];
				}
				(*this)[counter] = '\0';
			}
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Sigend Integers

		////////////////////////////////////////////////////////////////////////////////////////////////
		// int8_t

			void CPString::string::_BaseConversion_int8( int8_t  Source, uint8_t Base, bool LetterCase, bool IntFormat)
			{
				if(IntFormat == NumberConversion::IntFormat::Absolute)
				{
					_BaseConversion_uint8(Source, Base, LetterCase);
					return;
				}

				char buffer[8];
				uint8_t counter = 0;
				bool sign_flag = 0;

				if(Source < 0)
				{
					sign_flag = 1;
					Source*=-1;
				}

				if(Source == 0)
				{
					buffer[0] = '0';
					counter = 1;

				}
				else
				{
					while(Source > 0)
					{
						buffer[counter] = Flash::CopyBaseChar((Source+Base)%Base, LetterCase);
						counter++;
						Source/=Base;
					}
				}

				resize(counter+sign_flag);

				if(sign_flag){(*this)[0] = '-';}

				for(uint8_t i = 0; i < counter; i++)
				{
					(*this)[i+sign_flag] = buffer[(counter-1)-i];
				}

				(*this)[counter+sign_flag] = '\0';
			}
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
		// int16_t

			void CPString::string::_BaseConversion_int16( int16_t Source, uint8_t Base, bool LetterCase, bool IntFormat)
			{
				if(IntFormat == NumberConversion::IntFormat::Absolute)
				{
					_BaseConversion_uint8(Source, Base, LetterCase);
					return;
				}

				char buffer[16];
				uint8_t counter = 0;
				bool sign_flag = 0;

				if(Source < 0)
				{
					sign_flag = 1;
					Source*=-1;
				}

				if(Source == 0)
				{
					buffer[0] = '0';
					counter = 1;

				}
				else
				{
					while(Source > 0)
					{
						buffer[counter] = Flash::CopyBaseChar((Source+Base)%Base, LetterCase);
						counter++;
						Source/=Base;
					}
				}

				resize(counter+sign_flag);

				if(sign_flag){(*this)[0] = '-';}

				for(uint8_t i = 0; i < counter; i++)
				{
					(*this)[i+sign_flag] = buffer[(counter-1)-i];
				}

				(*this)[counter+sign_flag] = '\0';
			}
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
		// int32_t

			void CPString::string::_BaseConversion_int32( int32_t Source, uint8_t Base, bool LetterCase, bool IntFormat)
			{
				if(IntFormat == NumberConversion::IntFormat::Absolute)
				{
					_BaseConversion_uint8(Source, Base, LetterCase);
					return;
				}

				char buffer[32];
				uint8_t counter = 0;
				bool sign_flag = 0;

				if(Source < 0)
				{
					sign_flag = 1;
					Source*=-1;
				}

				if(Source == 0)
				{
					buffer[0] = '0';
					counter = 1;

				}
				else
				{
					while(Source > 0)
					{
						buffer[counter] = Flash::CopyBaseChar((Source+Base)%Base, LetterCase);
						counter++;
						Source/=Base;
					}
				}

				resize(counter+sign_flag);

				if(sign_flag){(*this)[0] = '-';}

				for(uint8_t i = 0; i < counter; i++)
				{
					(*this)[i+sign_flag] = buffer[(counter-1)-i];
				}

				(*this)[counter+sign_flag] = '\0';
			}
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
		// int64_t

			void CPString::string::_BaseConversion_int64( int64_t Source, uint8_t Base, bool LetterCase, bool IntFormat)
			{
				if(IntFormat == NumberConversion::IntFormat::Absolute)
				{
					_BaseConversion_uint8(Source, Base, LetterCase);
					return;
				}

				char buffer[64];
				uint8_t counter = 0;
				bool sign_flag = 0;

				if(Source < 0)
				{
					sign_flag = 1;
					Source*=-1;
				}

				if(Source == 0)
				{
					buffer[0] = '0';
					counter = 1;

				}
				else
				{
					while(Source > 0)
					{
						buffer[counter] = Flash::CopyBaseChar(Source%Base, LetterCase);
						counter++;
						Source/=Base;
					}
				}

				resize(counter+sign_flag);

				if(sign_flag){(*this)[0] = '-';}

				for(uint8_t i = 0; i < counter; i++)
				{
					(*this)[i+sign_flag] = buffer[(counter-1)-i];
				}

				(*this)[counter+sign_flag] = '\0';
			}
		//
		////////////////////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
